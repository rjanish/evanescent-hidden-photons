#!/usr/bin/env python
""" read and process output files of sample_effective_current """

import numpy as np

import matplotlib.pyplot as plt
from mpl_toolkits.axes_grid1 import make_axes_locatable

import parse_sample_effective_current as ec


plt.rcParams['text.usetex'] = True

def make_mode_slice_plots(output_files, prefix=""):
    """
    plot slices of effective current for two modes,
    to be used for comparison in paper
    """
    out = ec.read_effective_current_output(output_files, prefix)

    # color plot of |j_eff| for TM010
    run = "TM010-m10"
    xs = out[run]["x"][:, 0, :]
    zs = out[run]["z"][:, 0, :]
    fig, ax = plt.subplots()
    j = out[run]["jtotal"][:, 0, :]
    abs_max = np.abs(j[np.isfinite(j)]).max()
    cplot = ax.pcolor(zs, xs, j/abs_max, cmap="Reds", vmin=0, vmax=1)
    ax.set_aspect("equal")
    divider = make_axes_locatable(ax)
    cax = divider.append_axes("right", size="5%", pad=0.05)
    fig.colorbar(cplot, cax=cax)
    ax.set_title("Effective Current")

    # j_eff stream lines for TM010
    lw = 0.9
    starts = [[0.025, 0.8],
          [-0.4, 1.05],
          [0.05, 1],
          [0.15, 1],
          [0.25, 1],
          [0.35, 1],
          [ -0.2, 1.49],
          [0.2, 1.49],
          [0.4, 1.49]]
    stream = ax.streamplot(
              out[run]["z"][0, 0, :], out[run]["x"][:, 0, 0],
              out[run]["re_jz"][:, 0, :],
              out[run]["re_jr"][:, 0, :],
              broken_streamlines=False,
              color="maroon", linewidth=lw,
              start_points=starts, arrowsize=2,
              arrowstyle="->")

    # mode lines and crosses for TM010
    Ni=200
    xi = np.linspace(-0.5, 0, Ni)
    yi = np.linspace(0.0, 1, Ni)
    # X, Y = np.meshgrid(xi, yi)
    # E_norm = Ez_TM010(Y)/np.max(Ez_TM010(Y))
    stream = ax.streamplot(
                  xi, yi, np.ones((Ni, Ni)), np.zeros((Ni, Ni)), #np.zeros(E_norm.shape),
                  broken_streamlines=False,
                  color="navy", linewidth=lw, arrowsize=2,
                  arrowstyle="->",
                  start_points=[[-0.02, 0.05],
                                [-0.02, 0.15],
                                [-0.02, 0.3],
                                [-0.02, 0.6],
                                [-0.02, 0.9]])
    ax.text(-0.4, 0.35, r'$\displaystyle \vec{E}_\textrm{source} $',
            color='navy', size=14)
    # circ_l, circ_r = -0.5*2/7, -0.5*5/7
    # circ_x = [circ_l]*3 + [circ_r]*3
    # circ_y = [0.15*1.5, 0.45, 0.75]*2
    # c_circ = 'darkgreen'
    # for xp, yp in zip(circ_x, circ_y):
    #     ax.scatter([xp], [yp], marker='x', color=c_circ,
    #                s=6*(yp/0.15)**2, linewidth=2*yp)
    #     ax.add_patch(plt.Circle((xp, yp), 0.08*yp, color=c_circ,
    #                             fill=False, linewidth=2*yp))
    # cavity boundary
    ax.plot([-0.5, 0, 0], [1, 1, 0], marker='',
        linestyle='-', color='black',
        linewidth=2)

    fig.savefig("{}.png".format(run), dpi=160)
    plt.close(fig)

    # # color plot of j_eff_phi for TE011
    # run = "TE011-m10"
    # xs = out[run]["x"][:, 0, :]
    # zs = out[run]["z"][:, 0, :]
    # fig, ax = plt.subplots()
    # j = out[run]["re_jphi"][:, 0, :]
    # abs_max = np.abs(j[np.isfinite(j)]).max()
    # cplot = ax.pcolor(zs, xs, j/abs_max, cmap="Reds", vmin=0, vmax=1)
    # ax.set_aspect("equal")
    # divider = make_axes_locatable(ax)
    # cax = divider.append_axes("right", size="5%", pad=0.05)
    # fig.colorbar(cplot, cax=cax)
    # ax.set_title("Effective current generated by TE011 source")
    # fig.savefig("{}.png".format(run), dpi=160)
    # plt.close(fig)


if __name__ == "__main__":

    # paper_plot_runs = ["output-plot-TM010-m10.dat",
    #                    "output-plot-TE011-m10.dat"]
    paper_plot_runs = ["output-plot-old-TM010-m10.dat"]
    make_mode_slice_plots(paper_plot_runs, prefix="output-plot-old-")



